float distanceFunction(vec3 pos, float size){    //距離関数
    
 	pos = abs(pos);
    return (pos.x+pos.y+pos.z-size)*0.57735027;
    
    //return length(pos)-size;
    
}

float map(vec3 pos, float size){
    
    pos.xyz = mod(pos.xyz, 10.) - 1. *5.;
    return distanceFunction(pos, size);
    
}


vec3 normal(vec3 p, float size){    //法線の取得　　　//ヘンビブン→その点の垂直なベクトルが求まるとかなんとか　とにかく、ヘンビブンをしたら法線が求まる

  vec2 e = vec2(0.0001, 0);
  float d = distanceFunction(p, size);
  vec3 n = d - vec3(
    distanceFunction(p - e.xyy, size),
    distanceFunction(p- e.yxy, size),
    distanceFunction(p - e.yyx, size));
  return normalize(n);
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
    vec2 uv = (fragCoord * 2. -iResolution.xy) / min(iResolution.x, iResolution.y);
    
    vec3 camPos = vec3(iTime*10., 5.*iTime, -100);
    float screenZ = 2.5;
    vec3 rayDir = normalize(vec3(uv, screenZ));
    vec3 lightPos = normalize(vec3(1, 1, -10));
    vec3 col = vec3(0.);
    
    float depth = 0.0;
    float dist = 0.0;
   // float size = abs(sin(iTime*5.));
    //float cha0 = pow(texture(iChannel0, vec2(9.0, 10.0)).x, 2.0);
    
    for(int i = 0; i < 99; i++ ){

        vec3 rayPos =  camPos + (rayDir * depth);
        dist = map(rayPos, 1./*cha0*/);
        
        if(dist < 0.0001){
           
            
            vec3 n = normal(rayPos, 1.0);
            vec3 c1 = vec3(abs(sin(iTime)), 0.4, 0.9);
            vec3 c2 = vec3(0.3, 0.4, 0.9);
            col = mix(c1, c2, n);
            //col = vec3(diff);
            
            break;
        }
        
        depth += dist;
        
    }
    
    
    // Output to screen
    fragColor = vec4(col,1.0);
}