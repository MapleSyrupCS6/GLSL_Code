#define PI 3.141592653589793

float rand(vec2 id)
{
    return fract(sin(dot(id, vec2(12.9898, 78.233))) * 43758.5453);
}


float distanceFunction2( vec3 p, vec3 b, float r ){
    
    vec3 q = abs(p) - b;
  	return length(max(q,0.0)/*-abs(sin(iTime+PI))*/ + min(max(q.x,max(q.y,q.z)),0.0)) - r;
    
}

float distanceFunction( vec3 p,  vec3 b, float s )
{
  return length(p)-2.0;
}


float distanceFunction3( in vec3 p, vec3 b, float r)
{
    p = abs(p);
    //p.xy += rot;
    return (p.x+p.y+p.z-3.0)*0.57735027;
}

float map(vec3 p, vec3 b,  float r){
    
    p.x = mod(p.x, 10.) -1.*5.;
    return distanceFunction2(p, b, r);
}

vec3 normal(vec3 p, vec3 b, float r){
    
  vec2 e = vec2(0.0001, 0);
  float d = map(p, b, r);
  vec3 n = d - vec3(
    	map(p - e.xyy, b, r),
        map(p - e.yxy, b, r),
        map(p - e.yyx, b, r));
    
    	return normalize(n);
}


vec3 image(vec2 uv){
    
    vec2 st = uv*2.0;
    st = fract(st);
    vec2 id = (floor(uv*2.0)+0.5)/2.0;
    
    float offs = rand(id)*60.;
    float size = (1. + sin(iTime*3. + offs))*0.2;
   
    
    float d = distance(st, vec2(0.5, 0.5));
	d = step(d*sin(iTime*5.+offs), size);
    
    
    vec3 col = vec3(0.0);
    vec3 c1 = vec3(0.3, 0.5, 0.2);
    vec3 c2 = vec3(0.7, 0.4, 0.3);
   // col = mix(c1, c2, d);
    col = vec3(0.2 , d, 0.4);
    
    return col;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = (fragCoord*2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);

    vec3 CameraPos = vec3(5, 0, -20);
    float screenZ = 2.5;
    vec3 RayDir = normalize(vec3(uv, screenZ));
    vec3 lightDir = normalize(vec3(1.0, 1.0, -10.));
    
   // float size = abs(sin(iTime*2.))*2.;
    float depth = 0.0;
    float dist = 0.0;
    vec3 rayPos = vec3(0.0);
    vec3 col = vec3(0.0);
    
    for(int i = 0; i < 99; i++){
      	
        rayPos = CameraPos + (RayDir * depth);
        dist = map(rayPos, vec3(2.0, 2.0, 1.0), 0.6);
        
        if(dist < 0.0001) break;
        
        depth += dist;
    }
    
    
    if(dist < 0.0001)
    {
      	vec3 n = normal(rayPos, vec3(0.5, 0.5, 0.5), 0.5);
        float diff = dot(n ,lightDir);  
        vec3 c1 = vec3(0.5, 0.4, 0.9);
        vec3 c2 = vec3(0.9, 0.4, 0.7);
        vec3 im = image(uv);
        col = mix(vec3(0.8), im , diff);
        //col = im * diff;
    }else{
        col = vec3(0.9, 0.5, 0.3);
    }
    
    

    // Output to screen
    fragColor = vec4(col,1.0);
}