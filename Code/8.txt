#define PI 3.141592653589793

float rand(vec2 id)
{
    return fract(sin(dot(id, vec2(12.9898, 78.233))) * 43758.5453);
}


mat2 rotate2d(float _angle){
    return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
}

//float distanceFunction(vec3 pos, float size){
    
//    return length(pos)-size;
    
    
//}

float distanceFunction( in vec3 p, in float s, vec2 rot)
{
    p = abs(p);
    //p.xy += rot;
    return (p.x+p.y+p.z-s)*0.57735027;
}


float map(vec3 pos, float size, vec2 rot){
    
    //pos.xz = mod(pos.xz, 10.) - 1. * 5.;
    
    return distanceFunction(pos, size, rot);
    
}

vec3 normal(vec3 p, float size, vec2 rot){
  
    vec2 e  = vec2(0.0001, 0);
    float d = distanceFunction(p, size, rot);
    vec3 n = d -vec3(
       map(p - e.xyy, size, rot),
        map(p - e.yxy, size, rot),
        map(p - e.yyx, size, rot));
    return normalize(n);
}

vec3 image(vec2 uv){
    
    float n = 2.0;
    vec2 st = uv * n;
    st = rotate2d( iTime*PI ) * st;
    st = fract(st);
    vec2 id = (floor(uv*n)+0.5);
    
    float offs = rand(id)*60.;
    
    vec3 c = vec3(0.0);
    
	st = abs(st);
    
    float d = dot(st, normalize(vec2(1.0, 1.0)));
    d = max(d, st.x/2.);
    
    c = vec3(step(d-0.6, 0.2*sin(iTime*5.+offs)*20./**50.*/));
    
    vec3 c1 = vec3(0.0, 0.0, 0.0);
    vec3 c2 = vec3(0.3, 1.0, 0.1);
    
    c = mix(c1, c2, c);
    
    return c;
    
}



void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = (fragCoord*2.0- iResolution.xy)/ min(iResolution.x, iResolution.y);
    
    vec3 CameraPos = vec3(sin(20.+iTime*1.5), 0.+sin(100.+iTime*1.5), -10.);
    float screenZ = 2.5;
    vec3 RayDir = normalize(vec3(uv, screenZ));
    vec3 lightDir = normalize(vec3(1.0, 1.0, -10.));
    
    //float size = abs(sin(iTime*2.))*2.;
    float size  = 3.0;
    vec2 rot = rotate2d( iTime*PI ) * uv;
    float depth = 0.0;
    float dist = 0.0;
    vec3 rayPos = vec3(0.0);
    vec3 col = vec3(0.0);

    for(int i = 0; i < 99; i++){
      
        rayPos = CameraPos + (RayDir * depth);
        dist = map(rayPos, size, rot);
        
        if(dist < 0.0001) break;
        
        depth += dist;
        
    }
    
    
    if(dist < 0.0001){
      
        vec3 im = image(rayPos.xz);
        
        
        vec3 n = normal(rayPos, 1.0, rot);
        float diff = dot(n, lightDir);
        //vec3 c1 = vec3(0.5, 0.4, 0.9);
        //vec3 c2 = vec3(0.9, 0.4, 0.7);
        col = im + diff;
       // col = im;
    }else{
        //col = vec3(0.3, 0.4, 0.8);
    }

    

    // Output to screen
    fragColor = vec4(col,1.0);
}